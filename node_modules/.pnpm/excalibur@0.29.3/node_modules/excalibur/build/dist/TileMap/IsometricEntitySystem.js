import { System, SystemType } from '../EntityComponentSystem/System';
import { TransformComponent } from '../EntityComponentSystem/Components/TransformComponent';
import { IsometricEntityComponent } from './IsometricEntityComponent';
import { SystemPriority } from '../EntityComponentSystem';
export class IsometricEntitySystem extends System {
    constructor(world) {
        super();
        this.world = world;
        this.systemType = SystemType.Update;
        this.priority = SystemPriority.Lower;
        this.query = this.world.query([TransformComponent, IsometricEntityComponent]);
    }
    update() {
        let transform;
        let iso;
        for (const entity of this.query.entities) {
            transform = entity.get(TransformComponent);
            iso = entity.get(IsometricEntityComponent);
            const maxZindexPerElevation = Math.max(iso.columns * iso.tileWidth, iso.rows * iso.tileHeight);
            const newZ = maxZindexPerElevation * iso.elevation + transform.pos.y;
            transform.z = newZ;
        }
    }
}
//# sourceMappingURL=IsometricEntitySystem.js.map