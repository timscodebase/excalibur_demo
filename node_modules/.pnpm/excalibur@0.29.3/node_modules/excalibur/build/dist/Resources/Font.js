import { Font } from '../Graphics/Font';
import { Resource } from './Resource';
export class FontSource {
    constructor(
    /**
     * Path to the font resource relative from the HTML document hosting the game, or absolute
     */
    path, 
    /**
     * The font family name
     */
    family, { bustCache, ...options } = {}) {
        this.path = path;
        this.family = family;
        this._isLoaded = false;
        this._resource = new Resource(path, 'blob', bustCache);
        this._options = options;
    }
    async load() {
        if (this.isLoaded()) {
            return this.data;
        }
        try {
            const blob = await this._resource.load();
            const url = URL.createObjectURL(blob);
            if (!this.data) {
                this.data = new FontFace(this.family, `url(${url})`);
                document.fonts.add(this.data);
            }
            await this.data.load();
            this._isLoaded = true;
        }
        catch (error) {
            throw `Error loading FontSource from path '${this.path}' with error [${error.message}]`;
        }
        return this.data;
    }
    isLoaded() {
        return this._isLoaded;
    }
    /**
     * Build a font from this FontSource.
     * @param options {FontOptions} Override the font options
     */
    toFont(options) {
        return new Font({ family: this.family, ...this._options, ...options });
    }
}
//# sourceMappingURL=Font.js.map