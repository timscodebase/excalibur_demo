import { vec } from '../Math/vector';
import { SolverStrategy } from './SolverStrategy';
import { Physics } from './Physics';
import { ContactSolveBias } from './Solver/ContactBias';
export const DefaultPhysicsConfig = {
    enabled: true,
    gravity: vec(0, 0),
    solver: SolverStrategy.Arcade,
    colliders: {
        compositeStrategy: 'together'
    },
    continuous: {
        checkForFastBodies: true,
        disableMinimumSpeedForFastBody: false,
        surfaceEpsilon: 0.1
    },
    bodies: {
        canSleepByDefault: false,
        sleepEpsilon: 0.07,
        wakeThreshold: 0.07 * 3,
        sleepBias: 0.9,
        defaultMass: 10
    },
    dynamicTree: {
        boundsPadding: 5,
        velocityMultiplier: 2
    },
    arcade: {
        contactSolveBias: ContactSolveBias.None
    },
    realistic: {
        positionIterations: 3,
        velocityIterations: 8,
        slop: 1,
        steeringFactor: 0.2,
        warmStart: true
    }
};
/**
 * @deprecated will be removed in v0.30
 */
export function DeprecatedStaticToConfig() {
    return {
        enabled: Physics.enabled,
        gravity: Physics.gravity,
        solver: Physics.collisionResolutionStrategy,
        continuous: {
            checkForFastBodies: Physics.checkForFastBodies,
            disableMinimumSpeedForFastBody: Physics.disableMinimumSpeedForFastBody,
            surfaceEpsilon: Physics.surfaceEpsilon
        },
        colliders: {
            compositeStrategy: 'together'
        },
        bodies: {
            canSleepByDefault: Physics.bodiesCanSleepByDefault,
            sleepEpsilon: Physics.sleepEpsilon,
            wakeThreshold: Physics.wakeThreshold,
            sleepBias: Physics.sleepBias,
            defaultMass: Physics.defaultMass
        },
        dynamicTree: {
            boundsPadding: Physics.boundsPadding,
            velocityMultiplier: Physics.dynamicTreeVelocityMultiplier
        },
        arcade: {
            contactSolveBias: ContactSolveBias.None
        },
        realistic: {
            positionIterations: Physics.positionIterations,
            velocityIterations: Physics.velocityIterations,
            slop: Physics.slop,
            steeringFactor: Physics.steeringFactor,
            warmStart: Physics.warmStart
        }
    };
}
//# sourceMappingURL=PhysicsConfig.js.map