/**
 * Creates a injectable context that can be retrieved later with `useContext(context)`
 *
 * Example
 * ```typescript
 *
 * const AppContext = createContext({some: 'value'});
 * context.scope(val, () => {
 *    const value = useContext(AppContext);
 * })
 *
 * ```
 */
export function createContext() {
    const ctx = {
        scope: (value, cb) => {
            ctx.value = value;
            return cb();
        },
        value: undefined
    };
    return ctx;
}
/**
 * Retrieves the value from the current context
 */
export function useContext(context) {
    return context.value;
}
//# sourceMappingURL=Context.js.map